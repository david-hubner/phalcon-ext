<?php

namespace PhalconExt\Tests\Validation\Validator;

use PhalconExt\Validation\Validator\PasswordRetype;
use Phalcon\Validation\Exception;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-03-23 at 22:40:14.
 */
class PasswordRetypeTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers PhalconExt\Validation\Validator\PasswordRetype::validate
     */
    public function testValidateTrue()
    {
        $validator1 = new PasswordRetype(array(
            'origField' => 'testRetype',
            'message' => 'validation message',
            'allowEmpty' => false
        ));

        $mock = $this->getMock('Phalcon\Validation');
        $mock->expects($this->any())
            ->method('getValue')
            ->will($this->returnValue('password1'));

        $this->assertTrue($validator1->validate($mock, 'attribute'));

        $mock = $this->getMock('Phalcon\Validation');
        $mock->expects($this->any())
            ->method('getValue')
            ->will($this->returnValue(''));

        $this->assertTrue($validator1->validate($mock, 'attribute'));
    }

    /**
     * @covers PhalconExt\Validation\Validator\PasswordRetype::validate
     */
    public function testValidateFalse()
    {
        $validator1 = new PasswordRetype(array(
            'origField' => 'testRetype',
            'message' => 'validation message',
            'allowEmpty' => false
        ));

        $mock = $this->getMock('Phalcon\Validation');
        $mock->expects($this->any())
            ->method('getValue')
            ->will($this->onConsecutiveCalls('aaa', 'bbb'));

        $this->assertFalse($validator1->validate($mock, 'attribute'));

        $mock = $this->getMock('Phalcon\Validation');
        $mock->expects($this->any())
            ->method('getValue')
            ->withAnyParameters()
            ->will($this->onConsecutiveCalls('aaa', ''));

        $this->assertFalse($validator1->validate($mock, 'attribute'));

        $mock = $this->getMock('Phalcon\Validation');
        $mock->expects($this->any())
            ->method('getValue')
            ->withAnyParameters()
            ->will($this->onConsecutiveCalls('', 'aaa'));

        $this->assertFalse($validator1->validate($mock, 'attribute'));

        $mock = $this->getMock('Phalcon\Validation');
        $mock->expects($this->any())
            ->method('getValue')
            ->withAnyParameters()
            ->will($this->returnValue(array(1, 2, 3)));

        $this->assertFalse($validator1->validate($mock, 'attribute'));
    }

    /**
     * @covers PhalconExt\Validation\Validator\PasswordRetype::validate
     */
    public function testValidateAllowEmptyTrue()
    {
        $validator1 = new PasswordRetype(array(
            'origField' => 'testRetype',
            'message' => 'validation message',
            'allowEmpty' => false
        ));

        $mock = $this->getMock('Phalcon\Validation');
        $mock->expects($this->any())
            ->method('getValue')
            ->will($this->onConsecutiveCalls('aaa', 'bbb'));

        $this->assertFalse($validator1->validate($mock, 'attribute'));

        $mock = $this->getMock('Phalcon\Validation');
        $mock->expects($this->any())
            ->method('getValue')
            ->withAnyParameters()
            ->will($this->onConsecutiveCalls('aaa', ''));

        $this->assertFalse($validator1->validate($mock, 'attribute'));

        $mock = $this->getMock('Phalcon\Validation');
        $mock->expects($this->any())
            ->method('getValue')
            ->withAnyParameters()
            ->will($this->onConsecutiveCalls('', 'aaa'));

        $this->assertFalse($validator1->validate($mock, 'attribute'));

        $mock = $this->getMock('Phalcon\Validation');
        $mock->expects($this->any())
            ->method('getValue')
            ->withAnyParameters()
            ->will($this->returnValue(array(1, 2, 3)));

        $this->assertFalse($validator1->validate($mock, 'attribute'));
    }

    /**
     * @covers PhalconExt\Validation\Validator\PasswordRetype::validate
     */
    public function testValidateAllowEmptyFalse()
    {
        $validator1 = new PasswordRetype(array(
            'origField' => 'testRetype',
            'message' => 'validation message',
            'allowEmpty' => true
        ));

        $mock = $this->getMock('Phalcon\Validation');
        $mock->expects($this->any())
            ->method('getValue')
            ->withAnyParameters()
            ->will($this->returnValue(''));

        $this->assertTrue($validator1->validate($mock, 'attribute'));

        $mock = $this->getMock('Phalcon\Validation');
        $mock->expects($this->any())
            ->method('getValue')
            ->withAnyParameters()
            ->will($this->returnValue(false));

        $this->assertTrue($validator1->validate($mock, 'attribute'));

        $mock = $this->getMock('Phalcon\Validation');
        $mock->expects($this->any())
            ->method('getValue')
            ->withAnyParameters()
            ->will($this->returnValue(null));

        $this->assertTrue($validator1->validate($mock, 'attribute'));

        $mock = $this->getMock('Phalcon\Validation');
        $mock->expects($this->any())
            ->method('getValue')
            ->withAnyParameters()
            ->will($this->returnValue(0));

        $this->assertFalse($validator1->validate($mock, 'attribute'));
    }

    /**
     * @covers PhalconExt\Validation\Validator\PasswordRetype::validate
     */
    public function testValidateException()
    {
        $validator1 = new PasswordRetype();

        $mock = $this->getMock('Phalcon\Validation');
        $mock->expects($this->never())
            ->method('getValue')
            ->withAnyParameters()
            ->will($this->returnValue(''));

        $this->expectException(Exception::class);
        $validator1->validate($mock, 'attribute');
    }

}
